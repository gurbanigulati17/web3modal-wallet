[{"C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\index.tsx":"1","C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\styles.ts":"2","C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\App.tsx":"3","C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\helpers\\api.ts":"4","C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\helpers\\utilities.ts":"5","C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\helpers\\web3.ts":"6","C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\Wrapper.tsx":"7","C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\Button.tsx":"8","C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\Column.tsx":"9","C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\Loader.tsx":"10","C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\Modal.tsx":"11","C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\Header.tsx":"12","C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\AccountAssets.tsx":"13","C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\ModalResult.tsx":"14","C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\ConnectButton.tsx":"15","C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\constants\\index.ts":"16","C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\helpers\\chains.ts":"17","C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\helpers\\bignumber.ts":"18","C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\Blockie.tsx":"19","C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\Banner.tsx":"20","C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\AssetRow.tsx":"21","C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\constants\\actions.ts":"22","C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\constants\\contracts.ts":"23","C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\constants\\functions.ts":"24","C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\Icon.tsx":"25","C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\ERC20Icon.tsx":"26","C:\\Users\\Guru\\Downloads\\example\\src\\index.tsx":"27","C:\\Users\\Guru\\Downloads\\example\\src\\styles.ts":"28","C:\\Users\\Guru\\Downloads\\example\\src\\App.tsx":"29","C:\\Users\\Guru\\Downloads\\example\\src\\helpers\\api.ts":"30","C:\\Users\\Guru\\Downloads\\example\\src\\helpers\\web3.ts":"31","C:\\Users\\Guru\\Downloads\\example\\src\\helpers\\utilities.ts":"32","C:\\Users\\Guru\\Downloads\\example\\src\\components\\Button.tsx":"33","C:\\Users\\Guru\\Downloads\\example\\src\\components\\Column.tsx":"34","C:\\Users\\Guru\\Downloads\\example\\src\\components\\Wrapper.tsx":"35","C:\\Users\\Guru\\Downloads\\example\\src\\components\\Header.tsx":"36","C:\\Users\\Guru\\Downloads\\example\\src\\components\\Loader.tsx":"37","C:\\Users\\Guru\\Downloads\\example\\src\\components\\ModalResult.tsx":"38","C:\\Users\\Guru\\Downloads\\example\\src\\components\\Modal.tsx":"39","C:\\Users\\Guru\\Downloads\\example\\src\\components\\AccountAssets.tsx":"40","C:\\Users\\Guru\\Downloads\\example\\src\\components\\ConnectButton.tsx":"41","C:\\Users\\Guru\\Downloads\\example\\src\\constants\\index.ts":"42","C:\\Users\\Guru\\Downloads\\example\\src\\helpers\\bignumber.ts":"43","C:\\Users\\Guru\\Downloads\\example\\src\\helpers\\chains.ts":"44","C:\\Users\\Guru\\Downloads\\example\\src\\components\\Blockie.tsx":"45","C:\\Users\\Guru\\Downloads\\example\\src\\components\\AssetRow.tsx":"46","C:\\Users\\Guru\\Downloads\\example\\src\\components\\Banner.tsx":"47","C:\\Users\\Guru\\Downloads\\example\\src\\constants\\functions.ts":"48","C:\\Users\\Guru\\Downloads\\example\\src\\constants\\actions.ts":"49","C:\\Users\\Guru\\Downloads\\example\\src\\constants\\contracts.ts":"50","C:\\Users\\Guru\\Downloads\\example\\src\\components\\Icon.tsx":"51","C:\\Users\\Guru\\Downloads\\example\\src\\components\\ERC20Icon.tsx":"52"},{"size":546,"mtime":1644527286283,"results":"53","hashOfConfig":"54"},{"size":4465,"mtime":1644527286284,"results":"55","hashOfConfig":"54"},{"size":14789,"mtime":1644529721307,"results":"56","hashOfConfig":"54"},{"size":1308,"mtime":1644527286270,"results":"57","hashOfConfig":"54"},{"size":6813,"mtime":1644527286280,"results":"58","hashOfConfig":"54"},{"size":1085,"mtime":1644527286282,"results":"59","hashOfConfig":"54"},{"size":1029,"mtime":1644527286247,"results":"60","hashOfConfig":"54"},{"size":3588,"mtime":1644527286239,"results":"61","hashOfConfig":"54"},{"size":1232,"mtime":1644527286240,"results":"62","hashOfConfig":"54"},{"size":2059,"mtime":1644527286243,"results":"63","hashOfConfig":"54"},{"size":4365,"mtime":1644527286244,"results":"64","hashOfConfig":"54"},{"size":2685,"mtime":1644527286242,"results":"65","hashOfConfig":"54"},{"size":1552,"mtime":1644527286235,"results":"66","hashOfConfig":"54"},{"size":1805,"mtime":1644527286245,"results":"67","hashOfConfig":"54"},{"size":3460,"mtime":1644527286241,"results":"68","hashOfConfig":"54"},{"size":85,"mtime":1644527286266,"results":"69","hashOfConfig":"54"},{"size":5325,"mtime":1644527286276,"results":"70","hashOfConfig":"54"},{"size":5397,"mtime":1644527286275,"results":"71","hashOfConfig":"54"},{"size":998,"mtime":1644527286238,"results":"72","hashOfConfig":"54"},{"size":740,"mtime":1644527286237,"results":"73","hashOfConfig":"54"},{"size":1571,"mtime":1644527286236,"results":"74","hashOfConfig":"54"},{"size":247,"mtime":1644527286258,"results":"75","hashOfConfig":"54"},{"size":836,"mtime":1644527286261,"results":"76","hashOfConfig":"54"},{"size":95,"mtime":1644527286262,"results":"77","hashOfConfig":"54"},{"size":742,"mtime":1644527286243,"results":"78","hashOfConfig":"54"},{"size":561,"mtime":1644527286241,"results":"79","hashOfConfig":"54"},{"size":546,"mtime":1644527286283,"results":"80","hashOfConfig":"81"},{"size":4465,"mtime":1644527286284,"results":"82","hashOfConfig":"81"},{"size":14789,"mtime":1644529721307,"results":"83","hashOfConfig":"81"},{"size":1308,"mtime":1644527286270,"results":"84","hashOfConfig":"81"},{"size":1085,"mtime":1644527286282,"results":"85","hashOfConfig":"81"},{"size":6813,"mtime":1644527286280,"results":"86","hashOfConfig":"81"},{"size":3588,"mtime":1644527286239,"results":"87","hashOfConfig":"81"},{"size":1232,"mtime":1644527286240,"results":"88","hashOfConfig":"81"},{"size":1029,"mtime":1644527286247,"results":"89","hashOfConfig":"81"},{"size":2685,"mtime":1644527286242,"results":"90","hashOfConfig":"81"},{"size":2059,"mtime":1644527286243,"results":"91","hashOfConfig":"81"},{"size":1805,"mtime":1644527286245,"results":"92","hashOfConfig":"81"},{"size":4365,"mtime":1644527286244,"results":"93","hashOfConfig":"81"},{"size":1552,"mtime":1644527286235,"results":"94","hashOfConfig":"81"},{"size":3460,"mtime":1644527286241,"results":"95","hashOfConfig":"81"},{"size":85,"mtime":1644527286266,"results":"96","hashOfConfig":"81"},{"size":5397,"mtime":1644527286275,"results":"97","hashOfConfig":"81"},{"size":5325,"mtime":1644527286276,"results":"98","hashOfConfig":"81"},{"size":998,"mtime":1644527286238,"results":"99","hashOfConfig":"81"},{"size":1571,"mtime":1644527286236,"results":"100","hashOfConfig":"81"},{"size":740,"mtime":1644527286237,"results":"101","hashOfConfig":"81"},{"size":95,"mtime":1644527286262,"results":"102","hashOfConfig":"81"},{"size":247,"mtime":1644527286258,"results":"103","hashOfConfig":"81"},{"size":836,"mtime":1644527286261,"results":"104","hashOfConfig":"81"},{"size":742,"mtime":1644527286243,"results":"105","hashOfConfig":"81"},{"size":561,"mtime":1644527286241,"results":"106","hashOfConfig":"81"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},"1mu6lo6",{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"109"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mjpsj8",{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\index.tsx",[],["214","215"],"C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\styles.ts",[],"C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\App.tsx",["216","217"],"import * as React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Web3 from \"web3\";\r\nimport { convertUtf8ToHex } from \"@walletconnect/utils\";\r\n// @ts-ignore\r\nimport Web3Modal from \"web3modal\";\r\n// @ts-ignore\r\nimport WalletConnect from \"@walletconnect/web3-provider\";\r\n// @ts-ignore\r\nimport Torus from \"@toruslabs/torus-embed\";\r\n// @ts-ignore\r\nimport WalletLink from \"walletlink\";\r\n\r\nimport Button from \"./components/Button\";\r\nimport Column from \"./components/Column\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport Modal from \"./components/Modal\";\r\nimport Header from \"./components/Header\";\r\nimport Loader from \"./components/Loader\";\r\nimport ModalResult from \"./components/ModalResult\";\r\nimport AccountAssets from \"./components/AccountAssets\";\r\nimport ConnectButton from \"./components/ConnectButton\";\r\n\r\nimport { apiGetAccountAssets } from \"./helpers/api\";\r\nimport {\r\n  hashPersonalMessage,\r\n  recoverPublicKey,\r\n  recoverPersonalSignature,\r\n  formatTestTransaction,\r\n  getChainData\r\n} from \"./helpers/utilities\";\r\nimport { IAssetData } from \"./helpers/types\";\r\nimport { fonts } from \"./styles\";\r\nimport {\r\n  ETH_SEND_TRANSACTION,\r\n  ETH_SIGN,\r\n  PERSONAL_SIGN,\r\n  DAI_BALANCE_OF,\r\n  DAI_TRANSFER\r\n} from \"./constants\";\r\nimport { callBalanceOf, callTransfer } from \"./helpers/web3\";\r\n\r\nconst SLayout = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  min-height: 100vh;\r\n  text-align: center;\r\n`;\r\n\r\nconst SContent = styled(Wrapper)`\r\n  width: 100%;\r\n  height: 100%;\r\n  padding: 0 16px;\r\n`;\r\n\r\nconst SContainer = styled.div`\r\n  height: 100%;\r\n  min-height: 200px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  word-break: break-word;\r\n`;\r\n\r\nconst SLanding = styled(Column)`\r\n  height: 600px;\r\n`;\r\n\r\nconst SModalContainer = styled.div`\r\n  width: 100%;\r\n  position: relative;\r\n  word-wrap: break-word;\r\n`;\r\n\r\nconst SModalTitle = styled.div`\r\n  margin: 1em 0;\r\n  font-size: 20px;\r\n  font-weight: 700;\r\n`;\r\n\r\nconst SModalParagraph = styled.p`\r\n  margin-top: 30px;\r\n`;\r\n\r\n// @ts-ignore\r\nconst SBalances = styled(SLanding)`\r\n  height: 100%;\r\n  & h3 {\r\n    padding-top: 30px;\r\n  }\r\n`;\r\n\r\nconst STestButtonContainer = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst STestButton = styled(Button)`\r\n  border-radius: 8px;\r\n  font-size: ${fonts.size.medium};\r\n  height: 44px;\r\n  width: 100%;\r\n  max-width: 175px;\r\n  margin: 12px;\r\n`;\r\n\r\ninterface IAppState {\r\n  fetching: boolean;\r\n  address: string;\r\n  web3: any;\r\n  provider: any;\r\n  connected: boolean;\r\n  chainId: number;\r\n  networkId: number;\r\n  assets: IAssetData[];\r\n  showModal: boolean;\r\n  pendingRequest: boolean;\r\n  result: any | null;\r\n}\r\n\r\nconst INITIAL_STATE: IAppState = {\r\n  fetching: false,\r\n  address: \"\",\r\n  web3: null,\r\n  provider: null,\r\n  connected: false,\r\n  chainId: 1,\r\n  networkId: 1,\r\n  assets: [],\r\n  showModal: false,\r\n  pendingRequest: false,\r\n  result: null\r\n};\r\n\r\nfunction initWeb3(provider: any) {\r\n  const web3: any = new Web3(provider);\r\n\r\n  web3.eth.extend({\r\n    methods: [\r\n      {\r\n        name: \"chainId\",\r\n        call: \"eth_chainId\",\r\n        outputFormatter: web3.utils.hexToNumber\r\n      }\r\n    ]\r\n  });\r\n\r\n  return web3;\r\n}\r\n\r\nclass App extends React.Component<any, any> {\r\n  // @ts-ignore\r\n  public web3Modal: Web3Modal;\r\n  public state: IAppState;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      ...INITIAL_STATE\r\n    };\r\n\r\n    this.web3Modal = new Web3Modal({\r\n      network: this.getNetwork(),\r\n      cacheProvider: true,\r\n      providerOptions: this.getProviderOptions()\r\n    });\r\n  }\r\n\r\n  public componentDidMount() {\r\n    if (this.web3Modal.cachedProvider) {\r\n      this.onConnect();\r\n    }\r\n  }\r\n\r\n  public onConnect = async () => {\r\n    const provider = await this.web3Modal.connect();\r\n\r\n    await this.subscribeProvider(provider);\r\n\r\n    await provider.enable();\r\n    const web3: any = initWeb3(provider);\r\n\r\n    const accounts = await web3.eth.getAccounts();\r\n\r\n    const address = accounts[0];\r\n\r\n    const networkId = await web3.eth.net.getId();\r\n\r\n    const chainId = await web3.eth.chainId();\r\n\r\n    await this.setState({\r\n      web3,\r\n      provider,\r\n      connected: true,\r\n      address,\r\n      chainId,\r\n      networkId\r\n    });\r\n    await this.getAccountAssets();\r\n  };\r\n\r\n  public subscribeProvider = async (provider: any) => {\r\n    if (!provider.on) {\r\n      return;\r\n    }\r\n    provider.on(\"close\", () => this.resetApp());\r\n    provider.on(\"accountsChanged\", async (accounts: string[]) => {\r\n      await this.setState({ address: accounts[0] });\r\n      await this.getAccountAssets();\r\n    });\r\n    provider.on(\"chainChanged\", async (chainId: number) => {\r\n      const { web3 } = this.state;\r\n      const networkId = await web3.eth.net.getId();\r\n      await this.setState({ chainId, networkId });\r\n      await this.getAccountAssets();\r\n    });\r\n\r\n    provider.on(\"networkChanged\", async (networkId: number) => {\r\n      const { web3 } = this.state;\r\n      const chainId = await web3.eth.chainId();\r\n      await this.setState({ chainId, networkId });\r\n      await this.getAccountAssets();\r\n    });\r\n  };\r\n\r\n  public getNetwork = () => getChainData(this.state.chainId).network;\r\n\r\n  public getProviderOptions = () => {\r\n    // const infuraId = process.env.REACT_APP_INFURA_ID;\r\n  \r\n   // console.log(\"infuraId\", infuraId);\r\n    const providerOptions = {\r\n      walletconnect: {\r\n        package: WalletConnect,\r\n        options: {\r\n          infuraId: undefined,\r\n          rpc: {\r\n            1: \"https://RPC_URL\",\r\n          },chainId: 1\r\n        }\r\n      },\r\n      // torus: {\r\n      //   package: Torus\r\n      // },\r\n      // walletlink: {\r\n      //   package: WalletLink,\r\n      //   options: {\r\n      //     appName: \"Web3Modal Example App\",\r\n      //     infuraId: undefined,\r\n      //     rpc: {\r\n      //       1: \"https://RPC_URL\",\r\n      //     },chainId: 1\r\n      //   }\r\n      // }\r\n    };\r\n    return providerOptions;\r\n  };\r\n\r\n  public getAccountAssets = async () => {\r\n    const { address, chainId } = this.state;\r\n    this.setState({ fetching: true });\r\n    try {\r\n      // get account balances\r\n      const assets = await apiGetAccountAssets(address, chainId);\r\n\r\n      await this.setState({ fetching: false, assets });\r\n    } catch (error) {\r\n      console.error(error); // tslint:disable-line\r\n      await this.setState({ fetching: false });\r\n    }\r\n  };\r\n\r\n  public toggleModal = () =>\r\n    this.setState({ showModal: !this.state.showModal });\r\n\r\n  public testSendTransaction = async () => {\r\n    const { web3, address, chainId } = this.state;\r\n\r\n    if (!web3) {\r\n      return;\r\n    }\r\n\r\n    const tx = await formatTestTransaction(address, chainId);\r\n\r\n    try {\r\n      // open modal\r\n      this.toggleModal();\r\n\r\n      // toggle pending request indicator\r\n      this.setState({ pendingRequest: true });\r\n\r\n      // @ts-ignore\r\n      function sendTransaction(_tx: any) {\r\n        return new Promise((resolve, reject) => {\r\n          web3.eth\r\n            .sendTransaction(_tx)\r\n            .once(\"transactionHash\", (txHash: string) => resolve(txHash))\r\n            .catch((err: any) => reject(err));\r\n        });\r\n      }\r\n\r\n      // send transaction\r\n      const result = await sendTransaction(tx);\r\n\r\n      // format displayed result\r\n      const formattedResult = {\r\n        action: ETH_SEND_TRANSACTION,\r\n        txHash: result,\r\n        from: address,\r\n        to: address,\r\n        value: \"0 ETH\"\r\n      };\r\n\r\n      // display result\r\n      this.setState({\r\n        web3,\r\n        pendingRequest: false,\r\n        result: formattedResult || null\r\n      });\r\n    } catch (error) {\r\n      console.error(error); // tslint:disable-line\r\n      this.setState({ web3, pendingRequest: false, result: null });\r\n    }\r\n  };\r\n\r\n  public testSignMessage = async () => {\r\n    const { web3, address } = this.state;\r\n\r\n    if (!web3) {\r\n      return;\r\n    }\r\n\r\n    // test message\r\n    const message = \"My email is john@doe.com - 1537836206101\";\r\n\r\n    // hash message\r\n    const hash = hashPersonalMessage(message);\r\n\r\n    try {\r\n      // open modal\r\n      this.toggleModal();\r\n\r\n      // toggle pending request indicator\r\n      this.setState({ pendingRequest: true });\r\n\r\n      // send message\r\n      const result = await web3.eth.sign(hash, address);\r\n\r\n      // verify signature\r\n      const signer = recoverPublicKey(result, hash);\r\n      const verified = signer.toLowerCase() === address.toLowerCase();\r\n\r\n      // format displayed result\r\n      const formattedResult = {\r\n        action: ETH_SIGN,\r\n        address,\r\n        signer,\r\n        verified,\r\n        result\r\n      };\r\n\r\n      // display result\r\n      this.setState({\r\n        web3,\r\n        pendingRequest: false,\r\n        result: formattedResult || null\r\n      });\r\n    } catch (error) {\r\n      console.error(error); // tslint:disable-line\r\n      this.setState({ web3, pendingRequest: false, result: null });\r\n    }\r\n  };\r\n\r\n  public testSignPersonalMessage = async () => {\r\n    const { web3, address } = this.state;\r\n\r\n    if (!web3) {\r\n      return;\r\n    }\r\n\r\n    // test message\r\n    const message = \"My email is john@doe.com - 1537836206101\";\r\n\r\n    // encode message (hex)\r\n    const hexMsg = convertUtf8ToHex(message);\r\n\r\n    try {\r\n      // open modal\r\n      this.toggleModal();\r\n\r\n      // toggle pending request indicator\r\n      this.setState({ pendingRequest: true });\r\n\r\n      // send message\r\n      const result = await web3.eth.personal.sign(hexMsg, address);\r\n\r\n      // verify signature\r\n      const signer = recoverPersonalSignature(result, message);\r\n      const verified = signer.toLowerCase() === address.toLowerCase();\r\n\r\n      // format displayed result\r\n      const formattedResult = {\r\n        action: PERSONAL_SIGN,\r\n        address,\r\n        signer,\r\n        verified,\r\n        result\r\n      };\r\n\r\n      // display result\r\n      this.setState({\r\n        web3,\r\n        pendingRequest: false,\r\n        result: formattedResult || null\r\n      });\r\n    } catch (error) {\r\n      console.error(error); // tslint:disable-line\r\n      this.setState({ web3, pendingRequest: false, result: null });\r\n    }\r\n  };\r\n\r\n  public testContractCall = async (functionSig: string) => {\r\n    let contractCall = null;\r\n    switch (functionSig) {\r\n      case DAI_BALANCE_OF:\r\n        contractCall = callBalanceOf;\r\n        break;\r\n      case DAI_TRANSFER:\r\n        contractCall = callTransfer;\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (!contractCall) {\r\n      throw new Error(\r\n        `No matching contract calls for functionSig=${functionSig}`\r\n      );\r\n    }\r\n\r\n    const { web3, address, chainId } = this.state;\r\n    try {\r\n      // open modal\r\n      this.toggleModal();\r\n\r\n      // toggle pending request indicator\r\n      this.setState({ pendingRequest: true });\r\n\r\n      // send transaction\r\n      const result = await contractCall(address, chainId, web3);\r\n\r\n      // format displayed result\r\n      const formattedResult = {\r\n        action: functionSig,\r\n        result\r\n      };\r\n\r\n      // display result\r\n      this.setState({\r\n        web3,\r\n        pendingRequest: false,\r\n        result: formattedResult || null\r\n      });\r\n    } catch (error) {\r\n      console.error(error); // tslint:disable-line\r\n      this.setState({ web3, pendingRequest: false, result: null });\r\n    }\r\n  };\r\n\r\n  public resetApp = async () => {\r\n    const { web3 } = this.state;\r\n    if (web3 && web3.currentProvider && web3.currentProvider.close) {\r\n      await web3.currentProvider.close();\r\n    }\r\n    await this.web3Modal.clearCachedProvider();\r\n    this.setState({ ...INITIAL_STATE });\r\n  };\r\n\r\n  public render = () => {\r\n    const {\r\n      assets,\r\n      address,\r\n      connected,\r\n      chainId,\r\n      fetching,\r\n      showModal,\r\n      pendingRequest,\r\n      result\r\n    } = this.state;\r\n    return (\r\n      <SLayout>\r\n        <Column maxWidth={1000} spanHeight>\r\n          <Header\r\n            connected={connected}\r\n            address={address}\r\n            chainId={chainId}\r\n            killSession={this.resetApp}\r\n          />\r\n          <SContent>\r\n            {fetching ? (\r\n              <Column center>\r\n                <SContainer>\r\n                  <Loader />\r\n                </SContainer>\r\n              </Column>\r\n            ) : !!assets && !!assets.length ? (\r\n              <SBalances>\r\n                <h3>Actions</h3>\r\n                <Column center>\r\n                  <STestButtonContainer>\r\n                    <STestButton left onClick={this.testSendTransaction}>\r\n                      {ETH_SEND_TRANSACTION}\r\n                    </STestButton>\r\n\r\n                    <STestButton left onClick={this.testSignMessage}>\r\n                      {ETH_SIGN}\r\n                    </STestButton>\r\n\r\n                    <STestButton left onClick={this.testSignPersonalMessage}>\r\n                      {PERSONAL_SIGN}\r\n                    </STestButton>\r\n                    <STestButton\r\n                      left\r\n                      onClick={() => this.testContractCall(DAI_BALANCE_OF)}\r\n                    >\r\n                      {DAI_BALANCE_OF}\r\n                    </STestButton>\r\n\r\n                    <STestButton\r\n                      left\r\n                      onClick={() => this.testContractCall(DAI_TRANSFER)}\r\n                    >\r\n                      {DAI_TRANSFER}\r\n                    </STestButton>\r\n                  </STestButtonContainer>\r\n                </Column>\r\n                <h3>Balances</h3>\r\n                <AccountAssets chainId={chainId} assets={assets} />{\" \"}\r\n              </SBalances>\r\n            ) : (\r\n              <SLanding center>\r\n                <h3>{`Wallet Connect`}</h3>\r\n                <ConnectButton onClick={this.onConnect} />\r\n              </SLanding>\r\n            )}\r\n          </SContent>\r\n        </Column>\r\n        <Modal show={showModal} toggleModal={this.toggleModal}>\r\n          {pendingRequest ? (\r\n            <SModalContainer>\r\n              <SModalTitle>{\"Pending Call Request\"}</SModalTitle>\r\n              <SContainer>\r\n                <Loader />\r\n                <SModalParagraph>\r\n                  {\"Approve or reject request using your wallet\"}\r\n                </SModalParagraph>\r\n              </SContainer>\r\n            </SModalContainer>\r\n          ) : result ? (\r\n            <SModalContainer>\r\n              <SModalTitle>{\"Call Request Approved\"}</SModalTitle>\r\n              <ModalResult>{result}</ModalResult>\r\n            </SModalContainer>\r\n          ) : (\r\n            <SModalContainer>\r\n              <SModalTitle>{\"Call Request Rejected\"}</SModalTitle>\r\n            </SModalContainer>\r\n          )}\r\n        </Modal>\r\n      </SLayout>\r\n    );\r\n  };\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\helpers\\api.ts",[],"C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\helpers\\utilities.ts",[],"C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\helpers\\web3.ts",[],"C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\Wrapper.tsx",[],"C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\Button.tsx",[],"C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\Column.tsx",[],"C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\Loader.tsx",[],"C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\Modal.tsx",[],"C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\Header.tsx",[],"C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\AccountAssets.tsx",[],"C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\ModalResult.tsx",[],"C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\ConnectButton.tsx",[],"C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\constants\\index.ts",[],"C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\helpers\\chains.ts",[],"C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\helpers\\bignumber.ts",[],"C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\Blockie.tsx",[],"C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\Banner.tsx",[],"C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\AssetRow.tsx",[],"C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\constants\\actions.ts",[],"C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\constants\\contracts.ts",[],"C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\constants\\functions.ts",[],"C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\Icon.tsx",[],"C:\\Users\\Guru\\react-walletconnect\\walletconnect\\web3modal\\example\\src\\components\\ERC20Icon.tsx",[],["218","219"],"C:\\Users\\Guru\\Downloads\\example\\src\\index.tsx",[],"C:\\Users\\Guru\\Downloads\\example\\src\\styles.ts",[],"C:\\Users\\Guru\\Downloads\\example\\src\\App.tsx",["220","221"],"C:\\Users\\Guru\\Downloads\\example\\src\\helpers\\api.ts",[],"C:\\Users\\Guru\\Downloads\\example\\src\\helpers\\web3.ts",[],"C:\\Users\\Guru\\Downloads\\example\\src\\helpers\\utilities.ts",[],"C:\\Users\\Guru\\Downloads\\example\\src\\components\\Button.tsx",[],"C:\\Users\\Guru\\Downloads\\example\\src\\components\\Column.tsx",[],"C:\\Users\\Guru\\Downloads\\example\\src\\components\\Wrapper.tsx",[],"C:\\Users\\Guru\\Downloads\\example\\src\\components\\Header.tsx",[],"C:\\Users\\Guru\\Downloads\\example\\src\\components\\Loader.tsx",[],"C:\\Users\\Guru\\Downloads\\example\\src\\components\\ModalResult.tsx",[],"C:\\Users\\Guru\\Downloads\\example\\src\\components\\Modal.tsx",[],"C:\\Users\\Guru\\Downloads\\example\\src\\components\\AccountAssets.tsx",[],"C:\\Users\\Guru\\Downloads\\example\\src\\components\\ConnectButton.tsx",[],"C:\\Users\\Guru\\Downloads\\example\\src\\constants\\index.ts",[],"C:\\Users\\Guru\\Downloads\\example\\src\\helpers\\bignumber.ts",[],"C:\\Users\\Guru\\Downloads\\example\\src\\helpers\\chains.ts",[],"C:\\Users\\Guru\\Downloads\\example\\src\\components\\Blockie.tsx",[],"C:\\Users\\Guru\\Downloads\\example\\src\\components\\AssetRow.tsx",[],"C:\\Users\\Guru\\Downloads\\example\\src\\components\\Banner.tsx",[],"C:\\Users\\Guru\\Downloads\\example\\src\\constants\\functions.ts",[],"C:\\Users\\Guru\\Downloads\\example\\src\\constants\\actions.ts",[],"C:\\Users\\Guru\\Downloads\\example\\src\\constants\\contracts.ts",[],"C:\\Users\\Guru\\Downloads\\example\\src\\components\\Icon.tsx",[],"C:\\Users\\Guru\\Downloads\\example\\src\\components\\ERC20Icon.tsx",[],{"ruleId":"222","replacedBy":"223"},{"ruleId":"224","replacedBy":"225"},{"ruleId":"226","severity":1,"message":"227","line":10,"column":8,"nodeType":"228","messageId":"229","endLine":10,"endColumn":13},{"ruleId":"226","severity":1,"message":"230","line":12,"column":8,"nodeType":"228","messageId":"229","endLine":12,"endColumn":18},{"ruleId":"222","replacedBy":"231"},{"ruleId":"224","replacedBy":"232"},{"ruleId":"226","severity":1,"message":"227","line":10,"column":8,"nodeType":"228","messageId":"229","endLine":10,"endColumn":13},{"ruleId":"226","severity":1,"message":"230","line":12,"column":8,"nodeType":"228","messageId":"229","endLine":12,"endColumn":18},"no-native-reassign",["233"],"no-negated-in-lhs",["234"],"@typescript-eslint/no-unused-vars","'Torus' is defined but never used.","Identifier","unusedVar","'WalletLink' is defined but never used.",["233"],["234"],"no-global-assign","no-unsafe-negation"]